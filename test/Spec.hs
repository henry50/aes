import Test.Tasty ( testGroup, defaultMain, TestTree )
import Test.Tasty.HUnit ( assertEqual, testCase )
import Types (Byte, KeySchedule, Key, State)
import Cipher (keyExpansion, cipher, invCipher)

-- Appendix A tests
a1InputKey :: Key
a1InputKey = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c]
a1Output :: KeySchedule
a1Output = [[[0x2b, 0x28, 0xab, 0x09], [0x7e, 0xae, 0xf7, 0xcf], [0x15, 0xd2, 0x15, 0x4f], [0x16, 0xa6, 0x88, 0x3c]], [[0xa0, 0x88, 0x23, 0x2a], [0xfa, 0x54, 0xa3, 0x6c], [0xfe, 0x2c, 0x39, 0x76], [0x17, 0xb1, 0x39, 0x05]], [[0xf2, 0x7a, 0x59, 0x73], [0xc2, 0x96, 0x35, 0x59], [0x95, 0xb9, 0x80, 0xf6], [0xf2, 0x43, 0x7a, 0x7f]], [[0x3d, 0x47, 0x1e, 0x6d], [0x80, 0x16, 0x23, 0x7a], [0x47, 0xfe, 0x7e, 0x88], [0x7d, 0x3e, 0x44, 0x3b]], [[0xef, 0xa8, 0xb6, 0xdb], [0x44, 0x52, 0x71, 0x0b], [0xa5, 0x5b, 0x25, 0xad], [0x41, 0x7f, 0x3b, 0x00]], [[0xd4, 0x7c, 0xca, 0x11], [0xd1, 0x83, 0xf2, 0xf9], [0xc6, 0x9d, 0xb8, 0x15], [0xf8, 0x87, 0xbc, 0xbc]], [[0x6d, 0x11, 0xdb, 0xca], [0x88, 0x0b, 0xf9, 0x00], [0xa3, 0x3e, 0x86, 0x93], [0x7a, 0xfd, 0x41, 0xfd]], [[0x4e, 0x5f, 0x84, 0x4e], [0x54, 0x5f, 0xa6, 0xa6], [0xf7, 0xc9, 0x4f, 0xdc], [0x0e, 0xf3, 0xb2, 0x4f]], [[0xea, 0xb5, 0x31, 0x7f], [0xd2, 0x8d, 0x2b, 0x8d], [0x73, 0xba, 0xf5, 0x29], [0x21, 0xd2, 0x60, 0x2f]], [[0xac, 0x19, 0x28, 0x57], [0x77, 0xfa, 0xd1, 0x5c], [0x66, 0xdc, 0x29, 0x00], [0xf3, 0x21, 0x41, 0x6e]], [[0xd0, 0xc9, 0xe1, 0xb6], [0x14, 0xee, 0x3f, 0x63], [0xf9, 0x25, 0x0c, 0x0c], [0xa8, 0x89, 0xc8, 0xa6]]]
a2InputKey :: Key
a2InputKey = [0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5, 0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b]
a2Output :: KeySchedule
a2Output = [[[0x8e, 0xda, 0xc8, 0x80], [0x73, 0x0e, 0x10, 0x90], [0xb0, 0x64, 0xf3, 0x79], [0xf7, 0x52, 0x2b, 0xe5]], [[0x62, 0x52, 0xfe, 0x24], [0xf8, 0x2c, 0x0c, 0x02], [0xea, 0x6b, 0x91, 0xf5], [0xd2, 0x7b, 0xf7, 0xa5]], [[0xec, 0x6c, 0x0e, 0x5c], [0x12, 0x82, 0x7a, 0x56], [0x06, 0x7f, 0x95, 0xfe], [0x8e, 0x6b, 0xb9, 0xc2]], [[0x4d, 0x69, 0x85, 0xe9], [0xb7, 0xb5, 0xa7, 0x25], [0xb4, 0x41, 0x47, 0x38], [0xbd, 0x18, 0x96, 0xfd]], [[0xe7, 0xbb, 0x48, 0x21], [0x5f, 0x09, 0x5a, 0xef], [0xad, 0x53, 0xf0, 0xb1], [0x44, 0x86, 0x57, 0x4f]], [[0xa4, 0x4d, 0xaa, 0x11], [0x48, 0x6d, 0x32, 0x3b], [0xf6, 0xce, 0x63, 0x30], [0xd9, 0x24, 0x60, 0xe6]], [[0xa2, 0x83, 0x27, 0x6a], [0x5e, 0xb1, 0xf9, 0x94], [0x7e, 0xcf, 0x39, 0xf7], [0xd5, 0x9a, 0x43, 0x67]], [[0xc0, 0xd1, 0xec, 0x6f], [0xa6, 0x9d, 0x17, 0xa6], [0x94, 0xa4, 0x86, 0x49], [0x07, 0xe1, 0xeb, 0x71]], [[0x48, 0x22, 0xe2, 0x33], [0x5f, 0xcb, 0x6d, 0xf0], [0x70, 0x87, 0x13, 0xb7], [0x32, 0x55, 0x52, 0xb3]], [[0x40, 0x2f, 0x67, 0x45], [0xbe, 0x18, 0x47, 0x8c], [0xeb, 0xa2, 0xd2, 0x55], [0x28, 0x59, 0x6b, 0x3e]], [[0xa7, 0x94, 0x82, 0xad], [0xe1, 0x11, 0x1f, 0x07], [0x46, 0xf1, 0x75, 0xd7], [0x6c, 0xdf, 0x0a, 0x53]], [[0xca, 0x8f, 0x28, 0xbc], [0x40, 0xcc, 0x2d, 0x3c], [0x05, 0x50, 0x16, 0xe7], [0x38, 0x06, 0x6a, 0xb5]], [[0xe9, 0x44, 0x8e, 0x01], [0x8b, 0x8c, 0xcc, 0x00], [0xa0, 0x77, 0x72, 0x22], [0x6f, 0x3c, 0x04, 0x02]]]
a3InputKey :: Key
a3InputKey = [0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81, 0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4]
a3Output :: KeySchedule
a3Output = [[[0x60, 0x15, 0x2b, 0x85], [0x3d, 0xca, 0x73, 0x7d], [0xeb, 0x71, 0xae, 0x77], [0x10, 0xbe, 0xf0, 0x81]], [[0x1f, 0x3b, 0x2d, 0x09], [0x35, 0x61, 0x98, 0x14], [0x2c, 0x08, 0x10, 0xdf], [0x07, 0xd7, 0xa3, 0xf4]], [[0x9b, 0x8e, 0xa5, 0x20], [0xa3, 0x69, 0x1a, 0x67], [0x54, 0x25, 0x8b, 0xfc], [0x11, 0xaf, 0x5f, 0xde]], [[0xa8, 0x93, 0xbe, 0xb7], [0xb0, 0xd1, 0x49, 0x5d], [0x9c, 0x94, 0x84, 0x5b], [0x1a, 0xcd, 0x6e, 0x9a]], [[0xd5, 0x5b, 0xfe, 0xde], [0x9a, 0xf3, 0xe9, 0x8e], [0xec, 0xc9, 0x42, 0xbe], [0xb8, 0x17, 0x48, 0x96]], [[0xb5, 0x26, 0x98, 0x2f], [0xa9, 0x78, 0x31, 0x6c], [0x32, 0xa6, 0x22, 0x79], [0x8a, 0x47, 0x29, 0xb3]], [[0x81, 0xda, 0x24, 0xfa], [0x2c, 0xdf, 0x36, 0xb8], [0x81, 0x48, 0x0a, 0xb4], [0xad, 0xba, 0xf2, 0x64]], [[0x98, 0xbe, 0x26, 0x09], [0xc5, 0xbd, 0x8c, 0xe0], [0xbf, 0x19, 0x3b, 0x42], [0xc9, 0x8e, 0xa7, 0x14]], [[0x68, 0xb2, 0x96, 0x6c], [0x00, 0xdf, 0xe9, 0x51], [0x7b, 0x33, 0x39, 0x8d], [0xac, 0x16, 0xe4, 0x80]], [[0xc8, 0x76, 0x50, 0x59], [0x14, 0xa9, 0x25, 0xc5], [0xe2, 0xfb, 0xc0, 0x82], [0x04, 0x8a, 0x2d, 0x39]], [[0xde, 0x6c, 0xfa, 0x96], [0x13, 0xcc, 0x25, 0x74], [0x69, 0x5a, 0x63, 0xee], [0x67, 0x71, 0x95, 0x15]], [[0x58, 0x2e, 0x7e, 0x27], [0x86, 0x2f, 0x0a, 0xcf], [0xca, 0x31, 0xf1, 0x73], [0x5d, 0xd7, 0xfa, 0xc3]], [[0x74, 0x18, 0xe2, 0x74], [0x9c, 0x50, 0x75, 0x01], [0x47, 0x1d, 0x7e, 0x90], [0xab, 0xda, 0x4f, 0x5a]], [[0xca, 0xe4, 0x9a, 0xbd], [0xfa, 0xd5, 0xdf, 0x10], [0xaa, 0x9b, 0x6a, 0x19], [0xe3, 0x34, 0xce, 0x0d]], [[0xfe, 0xe6, 0x04, 0x70], [0x48, 0x18, 0x6d, 0x6c], [0x90, 0x8d, 0xf3, 0x63], [0xd1, 0x0b, 0x44, 0x1e]]]

-- Appendix B test
bInput :: State
bInput = [[0x32, 0x88, 0x31, 0xe0], [0x43, 0x5a, 0x31, 0x37], [0xf6, 0x30, 0x98, 0x07], [0xa8, 0x8d, 0xa2, 0x34]]
bOutput :: State
bOutput = [[0x39, 0x02, 0xdc, 0x19], [0x25, 0xdc, 0x11, 0x6a], [0x84, 0x09, 0x85, 0x0b], [0x1d, 0xfb, 0x97, 0x32]]

-- Appendix C tests
cInput :: State
cInput = [[0x00, 0x44, 0x88, 0xcc],[0x11, 0x55, 0x99, 0xdd],[0x22, 0x66, 0xaa, 0xee],[0x33, 0x77, 0xbb, 0xff]]
c1InputKey :: Key
c1InputKey = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f]
c1Output :: State
c1Output = [[0x69, 0x6a, 0xd8, 0x70], [0xc4, 0x7b, 0xcd, 0xb4], [0xe0, 0x04, 0xb7, 0xc5], [0xd8, 0x30, 0x80, 0x5a]]
c2InputKey :: Key
c2InputKey = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17]
c2Output :: State
c2Output = [[0xdd, 0x86, 0x6e, 0xec], [0xa9, 0x4c, 0xaf, 0x0d], [0x7c, 0xdf, 0x70, 0x71], [0xa4, 0xe0, 0xa0, 0x91]]
c3InputKey :: Key
c3InputKey = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f]
c3Output :: State
c3Output = [[0x8e, 0x51, 0xea, 0x4b], [0xa2, 0x67, 0xfc, 0x49], [0xb7, 0x45, 0x49, 0x60], [0xca, 0xbf, 0x90, 0x89]]


main :: IO ()
main = defaultMain tests

tests :: TestTree
tests = testGroup "Tests" [appendixA, appendixB, appendixC]

appendixA :: TestTree
appendixA = testGroup "Appendix A"
    [
        testCase "Appendix A.1 - Expansion of 128-bit key" $
            assertEqual "Key schedules do not match" a1Output (keyExpansion a1InputKey),
        testCase "Appendix A.2 - Expansion of 192-bit key" $
            assertEqual "Key schedules do not match" a2Output (keyExpansion a2InputKey),
        testCase "Appendix A.3 - Expansion of 256-bit key" $
            assertEqual "Key schedules do not match" a3Output (keyExpansion a3InputKey)
    ]

appendixB :: TestTree
appendixB = testGroup "Appendix B"
    [
        testCase "Appendix B - 128-bit cipher" $
            assertEqual "States do not match" bOutput (cipher bInput a1InputKey)
    ]

appendixC :: TestTree
appendixC = testGroup "Appendix C" 
    [
        testCase "Appendix C.1 - 128-bit cipher" $
            assertEqual "States do not match" c1Output (cipher cInput c1InputKey),
        testCase "Appendix C.1 - 128-bit inverse cipher" $
            assertEqual "States do not match" cInput (invCipher c1Output c1InputKey),
        testCase "Appendix C.2 - 192-bit cipher" $
            assertEqual "States do not match" c2Output (cipher cInput c2InputKey),
        testCase "Appendix C.2 - 192-bit inverse cipher" $
            assertEqual "States do not match" cInput (invCipher c2Output c2InputKey),
        testCase "Appendix C.3 - 256-bit cipher" $
            assertEqual "States do not match" c3Output (cipher cInput c3InputKey),
        testCase "Appendix C.3 - 256-bit inverse cipher" $
            assertEqual "States do not match" cInput (invCipher c3Output c3InputKey)
    ]
